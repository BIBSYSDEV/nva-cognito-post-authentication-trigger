AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaCognitoPreTokenGenerationTrigger
    Description: NVA Cognito Pre Token Generation Trigger
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${GIT_REPO}', '${CODEBUILD_RESOLVED_SOURCE_VERSION}', '@${BUILD_TIMESTAMP}']

Globals:
  Function:
    Timeout: 20

Parameters:
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  UserServiceSecretName:
    Type: String
    Description: Name of the Secret for Users and Role Service
  UserServiceSecretKey:
    Type: String
    Description: Key in the Secret for Users and Role Service
  UserServiceSecretArn:
    Type: String
    Description: ARN to the Secret for Users and Role Service

Resources:

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup


  TriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: AddUserToGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
        - PolicyName: GetSecretValue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref UserServiceSecretArn

  InvokePostAuthenticationTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpsertUserLambda
      Principal: cognito-idp.amazonaws.com

  UpsertUserApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: NVA Update user attributes API
          version: '0.0.2'
        paths:
          /upsertuser:
            post:
              summary: Update user attributes in Cognito and UsersAndRoles
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: body
                  name: event
                  description: event from cognito.
                  required: true
                  schema:
                    type: object
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpsertUserLambda.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Publication'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
        definitions:
          Publication:
            type: object
          Problem:
            type: object
            properties:
              title:
                type: string
              status:
                type: integer
              detail:
                type: string





  UpsertUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-pre-token-generation
      Handler: no.unit.nva.cognito.UpsertUserHandler::handleRequest
      Runtime: java11
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Timeout: 10
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 3
      AutoPublishAlias: live
      Environment:
        Variables:
          CUSTOMER_API_SCHEME: https
          CUSTOMER_API_HOST: !Ref CustomDomain
          USER_API_SCHEME: https
          USER_API_HOST: !Ref CustomDomain
          USER_SERVICE_SECRET_NAME: !Ref UserServiceSecretName
          USER_SERVICE_SECRET_KEY: !Ref UserServiceSecretKey

